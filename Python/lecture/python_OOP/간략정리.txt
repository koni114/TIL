** 클래스와 인스턴스
- 파이썬의 모든 것은 오브젝트
- 오브젝트는 여러가지 함수와 데이터를 담은 데이터 구조를 칭함
- 파이썬에서 이 오브젝트들은 first-class 이다
 
- 논리적인 데이터 집합인 오브젝트를 만들어 데이터 access 할 수 있는 방법
  1. 사전을 이용하는 경우
  2. class를 이용하는 경우
  3. module을 이용하는 경우 등이 존재

** 클래스 변수(class variable)
인스턴스 변수와 구분. 인스턴스 변수는 각각의 인스턴스마다 
가지고 있는 고유한 변수라고 한다면, 클래스 변수는 해당 클래스의
인스턴스들이 공통적으로 가지고 있는 변수를 의미

** 파이썬 오브젝트 네임 스페이스 찾는 순서
인스턴스 네임스페이스 -> 클래스 네임스페이스 -> 수퍼 네임스페이스

** 인스턴스 메소드(instance method)
- self를 인자로 받고, 하나의 인스턴스에만 한정된 데이터를 생성, 참조, 수정

** 클래스 메소드(class method)
클래스 메소드
- cls를 인자로 받고, 모든 인스턴스가 공유하는 클래스 변수와 같은 데이터를 참조
  생성, 수정할 수 있는 메소드를 의미함

** 클래스 메소드 특징
- @classmethod 를 붙여서 선언
- 클래스 메소드는 특정 로직을 통해 클래스 변수 입력 값들을 검열 할 수 있음
- 클래스 메소드는 인스턴스 생성자와 같은 용도로 사용하는 경우도 있음

** 스테틱 메소드
- self, cls 인자를 따로 받지 않음
- class 내부적으로 선언되어 있을 뿐 일반 함수와 전혀 다를게 없음

** 상속
한번 정의 된 데이터를 재활용 함으로써 반복 코드를 줄임
상속받은 자식 클래스의 인스턴스 네임 스페이스를 살펴보면 부모 클래스 내부 오브젝트들은 없음
코드를 재활용해 새로 구현하는 것을 override라고 한다

** 매직 메소드(magic method)
- 클래스 안에 정의 될 수 있는 스페셜 메소드
- int, str, list 등의 built-in 타입과 같은 작동을 하게 해줌 
- +, -, >, < 등의 오퍼레이터에 대해서 각각의 데이터 타입에 맞는 메소드로 

** overloading vs overriding
둘 다 코드의 재사용성을 강조
- overloading : 함수의 명은 같고 인자의 type, 수를 다르게 선언 하는 것을 의미
- overriding   : 상속을 사용해서 부모 클래스의 존재하는 함수을 재사용해서 적용
                    

** Tip or built-in function
- dir() : 함수의 인자가 없는 경우에는 모듈 레벨의 지역변수를,
          함수의 인자가 있는 경우에는 인자의 모든 속성과 메소드를 보여준다
-  isinstance(x, str) : 해당 인스턴스가 해당 클래스의 인스턴스 인지를 확인시켜줌
-  __doc__ : 우리가 만든 함수에 대한 설명을 추가하고 싶을때 해당 속성에 넣으면 됨
- id() : 해당 오브젝트(인스턴스)의 id 값이 return
- __dict__ : 클래스와 인스턴스의 네임 스페이스 안을 살펴볼 수 있음

** __init__ : 던더 init 던더 라고 부름

** 퍼스트 클래스(first-class) 함수
프로그래밍 언어가 함수를 first-calss citizen으로 취급하는 것을 뜻함
-> 함수를 변수에 할당
-> 함수를 함수의 return 값으로 지정할 수 있음
-> 함수를 인자로 전달

** 왜 퍼스트 클래스(first-class) 함수를 사용하는가?
- 다양한 함수를 재사용
- 기존의 함수나 모듈을 수정할 필요 없이 편리하게 사용 가능

** 클로저(closure)
- first-class 함수를 지원하는 언어의 네임 바인딩 기술
- 어떤 함수를 함수 자신이 가지고 있는 환경과 함께 저장한 레코드
- 함수가 가진 프리변수를 클로저가 만들어지는 당시의 값과 레퍼런스에 맵핑하여 주는 역할
- 클로저는 일반 함수와는 다르게, 자신의 영역 밖에서 호출된 함수의 변수 값과
  레퍼런스를 복사하고 저장한 뒤 캡처한 값들에 엑세스 할 수 있게 도와준다


self를 빼먹었을 때,
-> error 문구 : full_name() takes no arguments ( 1 given )

emp_1.full_name()
-> Employee.full_name(emp_1)
