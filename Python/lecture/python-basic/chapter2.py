### 점프 투 파이썬 ###
print("hello world")

'''
문자열 자료형
'''

### 문자열에 큰 따옴표 포함시키는 방법

# 1. 작은 따옴표 안에 큰 따옴표 넣기
say = '"python is very easy" he says'
print(say)
# 2. 백슬래시를 이용하여 큰 따옴표 넣기
say = '\"python is very easy\" he says'
say = "hello 'hee'"


### 변수 안에 여러 줄의 문장을 넣고 싶을 때 ###

# 1. \n 삽입하기 -> 이스케이프 코드라고 함
# 출력할 때 개행 됨을 잊지 말자!

multiline = 'Life is very short\nyou need to python'
print(multiline)

multiline = '''
    Life is very short
    You need to python
'''

### 문자열 연산하기 ###
# 문자열 연산은 다른 언어에서는 일반적으로 제공해 주지 않음 #

# 1. 문자열 더하기
head = "python"
tail = " is fun!"
head + tail

# 2. 문자열 곱하기
head = "python"
head * 2

print("=" * 50)
print("hello python")
print("=" * 50)

### 문자열 인덱싱 & 슬라이싱 ###

# 1. 문자열 인덱싱
## 파이썬은 0부터 숫자를 센다
a = "Life is too short, You need Python"
a[0]
a[10]
a[-1]  # 파이썬은 특별하게 인덱스에 -가 들어간다.
a[-3]

# 2. 문자열 슬라이싱
# 중요한 것은 [1:4] 이면 4는 포함되지 않는다
a[0:4]  # 4번째 index는 포함되지 않는다

# 공백도 마찬가지로 문자열이다
a[5:]  # 끝번호를 생략할 경우, 문자열의 끝까지 슬라이싱한다.
a[:17]  # 첫번호를 생략할 경우, 문자열의 첫번째 부터 슬라이싱한다.
a[4:-6]  # 뒷 숫자 인덱스에 마찬가지로 -가 들어가면, 뒤에서부터 인덱싱을 한 부분까지 슬라이싱이 적용된다.
a[:]  # 앞 뒤 숫자를 생략하면, 처음부터 끝까지를 의미한다.

# 슬라이싱으로 문자열 나누기
a = "20010331Rainy"
date = a[:8]  # 항상 뒷 인덱스는 포함되지 않는다는 것을 명심하자.
weather = a[8:]

### ** 주의 ! *** ###
# 문자형은 immutable 자료형이므로, replace 등을 수행할 수 없다!
a = "abcde"
a[0] = "B"  # error가 발생한다.
"B"+a[1:]  # 이런식으로 변경하여야 적용이 가능하다.

### 문자형 포매팅 ###
# 문자형 포매팅 : 문자열 내에 특정한 값을 바꿔야 할 경우가 있을 때 이를 가능하게 해주는 것
# 중요한 것은 %를 빼먹지 않는 것이 가장 중요!

# 1. 숫자 대입 : %d
print("I eat %s apples" %3)

# 2. 문자 대입 : %s
print("i like %s" %'apple')

# 3. 숫자 값을 나타내는 변수로 대입
number = 3
print("I like %d apples" % number)

# 4. 2개 이상의 값 넣기
number = 10
day = "three"
print("Today is %d and %s" %(number, day))

'''
문자열 포맷 코드
%d : 정수 %s : 문자열 %c : 문자 1개, %% Literal
'''

print("your percentage is %d%%" %number)

# 소수점 표현 & 공백 처리
# 1. 공백 추가 -> % 뒤 정수를 통해 공백을 추가할 수 있다.
# 양의 정수 : 오른쪽 정렬, 음의 정수 : 왼쪽 정렬
print("%10s" % "hi")
print("%-10s yes" % "hi")

# 2. 소수점 표현 : .(나타낼 소수점 자리 수)f
print("Pi is %0.4f" % 3.142592)  # 소수점 4째자리까지 나타냄을 확인


### 문자열 관련 함수( 꼭 기억하기! ) ###
a = "helloWorld"

# 1. 문자열에 포함되어 있는 특정 문자열 개수 세기 : count
a.count("o")  # o 가 2개 포함되어 있으므로, 2개 출력

# 2. 위치 알려주기 : find, index
# index 는 값이 없을때는 오류 출력 -> substring not found
#    해당 문자열의 첫번째로 나오는 문자열 인덱스 리턴, 없으면 -1 출력
a.find("hello")  # 0번째 부터 hello가 나왔으므로 0 출력
a.find("No")  # No 라는 문자는 나오지 않았으므로, -1 출력

# 3. 문자열 삽입 : join
a = ","
a.join("abcd")  # 뒤에 있는 문자열에 A 문자열을 각각의 위치에 삽입. 무조건 char 단위 사이에 입력됨을 확인!

# 4. 소문자, 대문자로 변경
# 이미 대문자나 소문자라면 아무것도 변경되지 않음
a.upper()
a.lower()

# 5. 공백 제거
# lstrip() : 왼쪽 공백 지우기, rstrip() : 오른쪽 공백 지우기, strip() : 양쪽 공백 지우기
a = "  hello   "
a.lstrip()
a.rstrip()
a.strip()

# 6. 문자열 바꾸기 : replace()
# 만약 바꾸려고 하는 문자가 없다면, 아무것도 바뀌지 않는다! **
a = "Life is too short"
a.replace("Life", "life")

# 7. 문자열 나누기 : split()
# mutable 객체인 list로 반환. () 안에 구분자를 넣어줄 수 있음!
a.split()
a= "hello"
a.join("m,m")


'''
리스트 자료형 : 다른 언어와 거의 동일!
-> 중요한 것 들만 파악하자
1. 리스트 내에는 다른 타입(ex) 리스트, 수치형, 문자열 등.) 을 섞어서 사용할 수 있다
2. +를 통해서 리스트를 더할 수 있고, *를 통해서 여러 번 반복 할 수 있다(**)
3. 리스트의 인덱싱을 통해서 두개의 값을 + 를 이용해서 붙이려고 할 때, 수치형 + 문자열은 오류 발생 !!!! 

'''
a = [1,2,3]
b = [4,5,6]
a + b  # 6자리 리스트임을 확인 할 수 있음
a * 2  # 1,2,3을 2번 반복한다


# 문자열로 변환 : str()
a = 10
str(a) + str(a[1])

# 리스트 요소 삭제하기
# 1.  = []
a = []
a[1:3] =  []

# 2. del 이용해 리스트 요소 삭제하기
a = [1, 2, "a"]
del a[1]  # del()의 형식이 아님을 주의!!!

'''
리스트 관련 함수
'''
a = [1,2,3]
# 1. 리스트에 요소 추가(뒤에!) append
a.append(4)
a.append([5,6])  # 하나의 인덱스 위치에 리스트가 들어 감을 확인!
a.append((1,2))  # 튜플 append

# 2. 리스트 정렬 : sort()
# 숫자, 문자열 또한 정렬 할 수 있음
# reverse : 현재 있는 리스트를 뒤집는 것임 ! 정렬한 후에 뒤집는 것이 아님
a = ["a", "c", "b"]
a.sort()
a.reverse()

# 3. 위치 반환 : index
# 입력 된 값이 있으면, 그 위치의 인덱스 반환
# 주의! 값이 없을 경우 error 발생.
# 문자열과 다르게 find attribute 는 없음
a = [1,2,3]
a.index(5)

# 4. 리스트에 요소 삽입 : insert
a = [1, 2, 3]
a.insert(0, 3)  # 0 위치에 3 삽입

# 5. 리스트에 요소 제거 : remove
a = [1, 2, 3, 1, 2, 3]
a.remove(1)  # 해당 값이 첫번 째로 나오는 위치에 있는 값을 제거!
a.remove(4)  # 값이 없으면 error 발생

# 6. pop 수행
# 리스트에서도 pop 이 가능하다는 점 !, push는 그냥 insert(0, 값) 하면 되겠지?
a.pop(0)  # 값을 출력하고,  해당 값은 리스트에서 제거!
a = [1,2,3,4,5]
a.pop(1)

# 7. 리스트에 포함된 x의 개수 세기 : count
a = [1, 2, 3, 1, 2, 3]
a.count(1)  # 리스트 내에서 1은 2개 있음을 확인!
a.count(2)  # 리스트 내에서 2는 2개 있음을 확인!

# 8. 리스트 확장 : extend
# 리스트 뒤에 리스트를 붙여 확장 시킬 수 있다. 이때 리스트만 가능!
# --> + list 와 같은 기능을 수행함

a = [1,2,3,4,5]
a.append(1)
a.sort()
a.reverse()
a.index(1)
a.insert(0,1)
a.remove(1)
a.pop()
a.count()
b = ["a", "b"]
a.extend(b)

'''
** 튜플 자료형
1. 튜플은 리스트와 거의 동일하지만, 다음과 같은 차이점이 존재한다.
- immutable : 튜플을 삭제하거나 수정하려고 하면 오류 발생
- ( ) 로 둘러 쌈
2. 평균적으로 수정이 가능한 리스트를 좀 더 많이 사용한다
3. 튜플도 기본적인 슬라이싱, 인덱싱, +, * 전부 제공함
'''

# 튜플 선언하기
a = (1, 2, 3)
b = 1, 2, 3  # 실제로 ( )로 두르지 않아도 튜플 선언이 가능하다
c = (1, )    # value가 하나인 튜플을 선언 할 때, 끝에 ,를 붙여 주어야 한다
d = (1)  # 이렇게 하면 그냥 리터럴 값만 들어감!


a = (1, 2, 3)
b = 1, 2, 3
c = (1, )
d = (1)

'''
*** 딕셔너리 자료형
- key : value 형태의 자료형. 인덱싱(시퀀스)이 존재하지 않음
- key -> 반드시 immutable 객체만 가능 ! ex) 숫자, 문자열, 튜플.. 리스트는 불가!
- value -> 당연히 mutable 객체도 가능 
- 딕셔너리의 중요한 점은 인덱싱을 하기 위한 객체가 아니라는점! key : value 형태
- 어떠한 짝이 있는 데이터를 표현할 때 주로 딕셔너리 사용한다
- 주의 !! : key 중복되면 랜덤으로 특정 pair 한개를 두고 나머지는 자동 삭제된다
'''
a = {'1':'abcd', '2':'1234', 3:'1234', 4:[1,2,3]}

# 1. 딕셔너리 추가
a["5"] = '1234'    # 5라는 문자열의 key에 1234라는 문자열 value 값을 추가
a["name"] = "key"  # name 이라는 문자열 key에 key 라는 문자열 value 값을 추가

# 2. key, value 값 return
# keys(), values() : 버전 3.0 부터 제공
# 해당 객체는 list 가 아니므로, list로써 사용하려면 형 변환 필요
a.keys()  # dict_keys 라는 객체 return
a.values()  # dict_values 라는 객체 return
a_list = list(a.values())  # list로 형변환 후 사용 가능

# 3. key, value pair 값 return : items()
# 튜플형으로 return
a.items()

# 4. 딕셔녀리 내부 값 전부 지우기 : clear()
a.clear()

# 5. key 로 value 얻기
# 5.1. a['key']
# 5.2. a.get()
# 두 가지 방법이 있는데, 동일하지만 key 값이 없는 경우 a['key'] 는 오류를 발생 시키고, a.get() 은 None return
a['nokey']
a.get('nokey')
a.get('nokey', 'foo')  # 값이 없는 경우, foo 라는 default 값을 return 하고 싶을 때

# 6. 해당 key가 있는지 조사하기 : in
'name' in a  # name 이라는 key 가 있으면 False , 아니면 True
'1' in a  # 1이 있으므로 True return

'''
** 집합 자료형
- set 키워드 이용,
- 중복 허용 X, 순서가 뒤죽 박죽 섞여 있다(딕셔너리와 비슷)
- 집합 관계를 구하기에 굉장히 특화 되어 있는 자료형
'''
s1 = set([1,2,3])

# 1. 교집합, 차집합, 합집합 구하기
# 교집합 : &, 합집합 : | , 차집합 : -
s1 = {1,2,3}
s2 = {2,3,4}
s1 & s2

# 2. 값 추가하기 : add()
s1 = set({1,2,3})
s1.add(4)

# 3. 여러 개 값 추가하기 : update()
s1.update([4, 5, 6])

# 4. 특정 값 제거하기 : remove
s1 = set({1,2,3})
[a,b] = 'python', 'life'
a,b = b,a

'''
** 자료형의 값을 저장하는 공간. 변수
- 자료형을 쓸 필요 없음 
- 파이썬에서 말하는 변수는 객체를 의미 -> 중요한 것은 다른 언어에서 이야기하는 참조형 변수!
'''

a = 3
b = 3
a is b  # a와 b는 3이라는 값을 참조하므로 true


# 입력한 자료형에 대한 참조 개수를 파악 : getrefcount()
import sys
sys.getrefcount(3)  # 왜 274? -> 파이썬 내부적으로 3을 사용하기 때문
                    # 3을 가리키는 변수를 늘리면 참조 개수가 증가하는 것을 볼 수 있음


'''
* 변수를 만드는 여러가지 방법
- 파이썬은 다른 언어와 다르게 변수를 만드는 방법이 여러가지 이다. 
  이를 통해서 편하게 접근이 가능하다
'''

a, b = ('python', 'life')
(a, b) = 'python', 'life'
[a, b] = ['python', 'life']
a = b = 'python'

## tip ! 리스트에 변수를 넣고, 리스트를 복사하고자 할 때,

# *** 조심
# 리스트는 mutable 객체 이므로, 기전 리스트의 값이 바뀌면, 참조하는 변수의 리스트 값도 모두 바뀌게 된다
a = [1,2,3]
b = a
a[2] = 1

b  # b 리스트의 인덱스 값도 1로 바뀐 것을 확인 가능

## 그렇다면 리스트를 복사해서 사용하고 싶다면 ?
# 1. [:] 사용
a = [1,2,3]
b = a[:]
a[2] = 0
b  # 바뀌지 않은 것을 확인


# 2. copy 모듈 이용
from copy import copy
b = copy(a)  # copy 함수를 이용하여 복사 가능




