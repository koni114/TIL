## Lambda
- 함수 이름 없이, 함수처럼 쓸 수 있는 익명 함수
- 수학의 람다 대수에서 유래함

general function
def f(x, y):
 return sum(x, y)

lambda function
f = lambda x, y : x + y

-  Python 3부터는 권장하지 않으나 여전히 많이 쓰임

print(lambda x, y: x + y)(1,3))

## Map Reduce
# Map function
- Sequence 자료형 각 element에 동일한 function을 적용함
- 2개 이상의 list에도 적용 가능함. if. filter도 사용 가능
- python 3 이상 부터는 iteration을 생성 -> list을 붙여줘야 list 사용 가능
- 실행 시점의 값을 생성, 메모리 효율적

map(function_name, list_data)

ex  = [1,2,3,4,5]
f = lambda x : x ** 2
list(map(f, ex))

# reduce function
- 코드의 직관성이 떨어져서 사용을 권장하지 않음

from functools import reduce
print(reduce(lambda x, y: x+y, [1,2,3,4,5]))

# Asterisk
- 흔히 알고 있는 * 를 의미함
- 단순 곱셈, 제곱연산, 가변 인자 활용 등 다양한게 사용됨
- function 내 parameter 에 * 붙이면, 가변 parameter
- 변수에 * 붙이면 unpacking
- 함수의 입력값, zip 등에 유용하게 사용 가능

for data in zip(*( -[1, 2], [3, 4], [5, 6])):
	print(data)
